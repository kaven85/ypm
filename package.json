{
  "name": "ypm",
  "version": "0.1.9",
  "description": "yygame npm fis tool",
  "main": "ypm.js",
  "bin": {
    "ypm": "bin/ypm"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "ypm"
  ],
  "dependencies": {
    "fis": "*",
    "fis-parser-coffee-script": "0.0.2",
    "fis-parser-less": "0.0.8",
    "fis-parser-utc": "0.0.2",
    "fis-lint-jshint": "0.0.5",
    "fis-postpackager-ypm": "*",
    "fis-optimizer-html-compress": "0.0.4",
    "fis-postprocessor-ypm": "*"
  },
  "author": {
    "name": "Kaven.D"
  },
  "license": "MIT",
  "readme": "yygame超级利器！\n======\n\n\n\n* 以 ``seajs`` 作为模块化框架\n* 所有静态资源自动加 ``md5版本戳``，seajs均可加载定位\n* 支持给所有静态资源添加域名前缀，seajs加载毫无压力\n* 非常易用的自动 ``csssprites``\n* 自动jshint校验js、coffee文件，校验结果为 ``中文`` 显示\n* js、css压缩，压缩时保留require关键字，使得seajs运行正常\n* png图片压缩，支持 ``将png24压缩为png8``\n* 内置本地开发调试服务器，支持运行 ``jsp``、``php``\n* 支持使用 ``less``、``coffeescript`` 开发项目\n* 支持将underscore模板编译成 ``js模板函数`` 直接嵌入到js或coffee文件中使用\n* 支持define自动包装，写seajs组件如同写nodejs一样舒爽\n* 支持文件监听，保存即发布\n* 支持浏览器自动刷新，保存即刷新\n* 可以上传到远端服务器，保存即增量编译上传\n* 超低学习成本，只须记忆 ``3`` 条命令即可完成开发\n* 抹平编码差异，开发中无论是gbk、gb2312、utf8、utf8-bom等编码的文件，输出时都能统一指定为utf8无bom（默认）或者gbk文件\n* 跨平台支持win、mac、linux等系统\n\n详细用法\n=========\n\n## 安装\n\n```bash\nnpm install -g ypm\n```\n\n非win系统最好将npm的包安装在用户目录下，尽量避免使用 ``sudo`` 来安装。修改npm install -g安装目录的方法为：\n\n```bash\n# 设置global路径为用户目录\nnpm config set prefix ~/npm\n# 将~/npm/bin路径加到PATH变量中\necho -e '\\nexport PATH=~/npm/bin:$PATH' >> ~/.bashrc\n# 重新载入.bashrc\nsource ~/.bashrc\n# 安装ypm\nnpm install -g ypm\n```\n\n安装成功后执行 ``ypm -h`` 即可看到相关开发命令帮助\n\n## 获得一个todo样例项目\n\n```bash\n# 使用ypm的install命令来获取开发资源\nypm install seajs-todo-demo\n```\n\n在当前目录下即可看到令人期待的seajs模块化项目啦！\n\n> 如果你执行 ``ypm install seajs-todo-demo`` 命令没成功，可以git clone 这个项目： [seajs-todo-demo](https://github.com/fouber/seajs-todo-demo)\n\n## 让代码跑起来！\n\n首先，启动内置的调试服务器：\n\n```bash\nypm server start --no-rewrite\n```\n\n此时ypm会启动一个精巧的jetty服务器，并且打开浏览器访问了 http://127.0.0.1:8080 ，现在这个调试环境什么也没有，接下来，我们在命令行下cd到我们下载的样例项目中：\n\n```bash\ncd todo-demo\n```\n\n第三步，执行ypm的编译命令：\n\n```bash\nypm release\n```\n\n第四步，刷新浏览器，查看我们的项目。\n\n## 各种功能体验\n\n1. 给所有资源加 ``md5版本戳``，执行：\n\n    ```bash\n    ypm release -m\n    ```\n    \n    然后刷新浏览器，看一下源码吧！\n\n1. 压缩js、css、图片，执行：\n\n    ```bash\n    ypm release -o\n    ```\n\n1. 校验js，执行：\n\n    ```bash\n    ypm release -l\n    ```\n\n1. 自动csssprite，执行：\n\n    ```bash\n    ypm release -p\n    ```\n    \n    可以看到 ``#todo-list label`` 的图片都自动合并了哦\n\n1. 所有静态资源加域名，先修改fis-conf.js文件，去除掉 ``第2行`` 的注释，然后执行：\n\n    ```bash\n    ypm release -D\n    ```\n\n1. 文件监听，执行：\n\n    ```bash\n    ypm release -w\n    ```\n    \n    命令行窗口不要关闭，然后去修改源码->保存->刷新浏览器，就能看到更新的效果。\n\n1. 文件上传，执行：\n\n    ```bash\n    ypm release -d remote\n    ```\n    \n    就可以发布到我的一个小服务器上，然后浏览器访问： http://vm-1.chongzi.kd.io/\n\n1. 加域名、压缩、加md5戳、校验、csssprite、把编译好的文件产出到output目录中（其实就是随意组合使用前面提到面的参数啦）：\n\n    ```bash\n    ypm release -Domlp -d ../output\n    ```\n\n1. 文件监听、启动live-reload服务器、同时发布到本地调试目录、outpu目录和远端服务器：\n\n    ```bash\n    ypm release -wLd preview,remote,../output\n    ```\n\n    使用自动刷新功能需要添加 ``live-reload`` 浏览器插件，请google之，我没做可以自动添加脚本的功能，因为懒。。。\n\n## 目录规范\n\n任何 ``目录规范``、``部署规范``、``编译规范`` 都是可配置的，不过略微麻烦一些，有兴趣的同学可以在issues里留言，这里只介绍内置的规范。\n\n内置的规范包括：\n\n1. ``.less`` 后缀的文件是less文件，编译后得到css文件。\n1. ``.minix.less`` 后缀的文件定义less的minix，编译后不会产出。\n1. ``.coffee`` 后缀的文件是coffee-script，编译后得到js文件。\n1. ``.tmpl`` 后缀的文件是underscore前端模板，左右定界符为 ``<%`` 和 ``%>``，编译后不会产出。在js或coffee中使用 [``__inline('path')``](https://github.com/fouber/seajs-todo-demo/blob/c80f78cd56c2ad31ff344892f7a0dd5648f049d0/modules/views/todos.js#L12) 函数将其嵌入到js或coffee文件中作为模板函数使用。\n1. 扔在 ``modules`` 目录下的js、css、less、coffee文件都是模块化文件，会自动包装define，自己就不要写了。使用require.async或者require加载模块的时候id与文件的对应规则是这样的：\n<table>\n    <tr>\n        <td>文件</td>\n        <td>引用id</td>\n        <td>举个例子</td>\n    </tr>\n    <tr>\n        <td>/modules/a.js</td>\n        <td>a</td>\n        <td>require('a');</td>\n    </tr>\n    <tr>\n        <td>/modules/b/b.js</td>\n        <td>b</td>\n        <td>异步调用：require.async('b');</td>\n    </tr>\n    <tr>\n        <td>/modules/b/c.js</td>\n        <td>b/c</td>\n        <td>require('b/c');</td>\n    </tr>\n</table>\n1. 扔在 ``lib`` 目录下的文件不被认为是模块化的，请直接在页面上使用script或link标签引用。\n\n> 如果使用中遇到什么觉得诡异的地方，欢迎issues留言",
  "readmeFilename": "README.md",
  "_id": "ypm@0.1.7",
  "_from": "ypm@"
}
